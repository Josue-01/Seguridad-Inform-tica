# Este flujo de trabajo realiza una instalación limpia de las dependencias de Node, las almacena en caché/restaura, construye el código fuente y ejecuta pruebas en diferentes versiones de Node
name: UNA-CHAT JOSUE

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install dependencies
      run: npm ci

  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    - name: Run ESLint
      run: npm run lint

  sast:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  test:
    runs-on: ubuntu-latest
    needs: [build, lint, sast]
    strategy:
      matrix:
        node-version: [20.x]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install dependencies
      run: npm ci
    - name: List installed packages
      run: npm list
    - name: Run tests
      run: npm test

  docker-scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build Docker image
      run: docker build -t josue96/chat-una-app:latest .
    - name: Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@v0.6.1
      with:
        image-ref: josue96/chat-una-app:latest
    - name: Push Docker image if scan passes
      if: success()
      run: docker push josue96/chat-una-app:latest

  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-scan
    steps:
    - name: Deploy to Staging Environment
      env:
        STAGING_SERVER: ${{ secrets.STAGING_SERVER }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
        ssh -o StrictHostKeyChecking=no $STAGING_SERVER 'docker pull josue96/chat-una-app:latest && docker-compose up -d'

  nuclei-scan:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
    - name: Run Nuclei Security Scans
      uses: projectdiscovery/nuclei-action@v1
      with:
        url: ${{ secrets.STAGING_URL }}
